#!/bin/bash
#
# WARNING:
#	The script 'phgdoc' is generated by 'configure' from 'phgdoc.in',
#	when making changes the latter should be modified.
#
# This script extracts a macro definition or a function prototype from the
# header files, and optionally displays the source file of a C function.
#
# $Id: phgdoc.in,v 1.12 2012/11/09 06:58:39 zlb Exp $

INCS=@PHG_HEADERS@
SRCS=@PHG_SOURCES@

# The source will be shown if options are given or the cmd name is 'phgsrc'
show_source=false
if test "$1" = "-s" -o "$1" = "-source" -o "$1" = "-v"; then
    show_source=true
    shift
fi
test "`basename $0`" = "phgsrc" && show_source=true

if [ $# -ne 1 ]
then
    echo 1>&2 "Usage: $0 [-s|-source|-v] {function or macro name}"
    exit 1
fi

CSTR="a-zA-Z0-9_"

files=`grep -EH '^# *define  *'$1'[^'$CSTR']|^ *(long  *|const  *|struct  *|)['$CSTR']+  *(\*|)'$1' *\(' $INCS | gawk -F: '{print $1}' | sort -u`

if test -z "$files"
then
    echo -n 1>&2 "\"$1\" not found."
    a=`grep -Eh '^# *define  *['$CSTR']*'$1'|^ *(long  *|const  *|struct  *|)['$CSTR']+  *(\*|)['$CSTR']*'$1'['$CSTR']* *\(' $INCS \
	| sed -r -e 's/^(# *| *)(long  *|const  *|struct  *|)[^	 \(]*  *(\*|)([^	 \(]*'$1'[^	 \(]*).*/\4/g' \
	| sort -u | sed -e 's/^/  /'`
    if test -n "$a"; then
	echo 1>&2 " Possible candidates are:"
	echo "$a"
    else
	echo ""
    fi
    exit 1
fi

#echo "------------------------------------------------------------------------"
for f in $files
do
    gawk '
	function process_func(    i, n, c)
	{
	    n = length($0);
	    for (i = 1; i <= n; i++) {
		c = substr($0, i, 1)
		printf "%s", c
		if (c == ";") {
		    print ""
		    mode = 0
		    return
		}
	    }
	    print ""
	}
	BEGIN {mode = 0}
	# default action
	{
	    if (mode == 1) {
		process_func()
		next
	    }
	    else if (mode == 2) {
		print
		if (substr($0, length($0)) != "\\")
		    mode = 0
		next
	    }
	}
	/^ *(long  *|const  *|struct  *|)['$CSTR']+  *(\*|)'$1' *\(/ {
	    # function
	    mode = 1;
	    process_func()
	    next
	}
	/^# *define  *'$1'[^'$CSTR']/ {
	    # macro
	    print
	    if (substr($0, length($0)) == "\\")
		mode = 2
	    next
	}
  	' "$f"
done
#echo "------------------------------------------------------------------------"

$show_source || exit 0
# Try to locate the source
if grep -Eq '^ *(long  *|const  *|struct  *|)['$CSTR']+  *(\*|)'$1' *\(' "$f"
then
    # .c or .cxx file
    #SRCS="${f%/include/*}/src/*.c*"
    #-------
    key='^'$1' *('
    f=`grep -H "$key" $SRCS 2>/dev/null | gawk -F: '{print $1}' \
	| sort -u | head -1`
    #-------
else
    # .h file
    key='^# *define  *'$1'[^'$CSTR']'
    exit 0
fi
if test -z "$f" || ! test -r "$f"; then
    echo 1>&2 "Error: cannot locate the source file for \"$1\"."
    exit 1
fi
if test -n "$DISPLAY"; then
    /usr/bin/gvim -R -c "/$key" $f
else
    echo 1>&2 "Press [Enter] to show the source file (Ctrl-C to cancel)."
    read $dummy
    /usr/bin/vim -R -c "/$key" $f
fi
